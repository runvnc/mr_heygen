window.document.getElementById("captions");let s=null,o=null,t=null,r="",v,i,a=!1,m=!1;async function p(){return s=await navigator.mediaDevices.getUserMedia({audio:!0}),new MediaRecorder(s)}async function f(){r="";try{window.shutUp()}catch(n){console.warn("error interrupting avatar",n)}if(o)try{o.stop(),o.removeAllListeners(),o=null}catch(n){console.warn("error closing microphone",n)}o=await p(),await o.start(50),o.onstart=()=>{console.log("client: microphone opened"),document.body.classList.add("recording")},o.onstop=()=>{console.log("client: microphone closed"),document.body.classList.remove("recording");try{o.removeAllListeners()}catch{}o=null},o.ondataavailable=n=>{const e=n.data;console.log("client: sent data to websocket"),t.send(e)}}async function h(){if(!o){console.log("microphone undefined or not open, not running close code");return}try{o.stop()}catch{}setTimeout(()=>{try{o.removeAllListeners()}catch{}if(r&&r!="")try{let n=r;r==""&&(n=userInput.value),window.handleSpeak(n)}catch(n){console.warn("error calling handleSpeak",n)}r="",console.log("closing and cleaning up microphone");try{s&&s.getTracks().forEach(n=>{n.stop()})}catch{}s=null,console.log("client: microphone closed"),document.body.classList.remove("recording"),o=null,setTimeout(()=>{d()},30)},50)}function u(n){console.log("mousedown event"),n.preventDefault(),f()}function l(n){console.log("mouseup event"),n.preventDefault(),setTimeout(h,250)}async function w(n){const e=document.getElementById("record");if(!e){console.warn("no listen button found");return}if(e)try{e.removeEventListener("mousedown",u),e.removeEventListener("touchstart",u),e.removeEventListener("mouseup",l),e.removeEventListener("mouseleave",l),e.removeEventListener("touchend",l),e.removeEventListener("touchcancel",l)}catch{console.log("no button listeners to remove")}if(console.log("client: waiting to open microphone"),e.addEventListener("mousedown",u),e.addEventListener("touchstart",u),e.addEventListener("mouseup",l),e.addEventListener("mouseleave",l),e.addEventListener("touchend",l),e.addEventListener("touchcancel",l),v)try{clearInterval(v)}catch{}v=setInterval(()=>{try{n&&(n.keepAlive(),console.log("sent keepalive"))}catch(c){console.log("error keeping connection alive",c)}},1e4)}async function d(){if(a){console.log("already initializing TTS, returning");return}a=!0;try{const n="a2dae355bff63649e396812508e25624420fc377";if(t){try{t.removeAllListeners()}catch(e){console.warn("error removing socket listeners",e)}t=void 0}i&&(i=void 0),i=createClient(n),t=i.listen.live({model:"nova-2",smart_format:!0,interim_results:!0,punctuate:!0,numerals:!0,endpointing:50}),t.on("open",async()=>{console.log("%c socket open event","background: green; color: yellow"),console.log("client: connected to websocket")}),t.on("Results",async e=>{console.log("%c socket results event"+JSON.stringify(e),"background: blue; color: yellow"),console.log(e);const c=e.channel.alternatives[0].transcript;if(c!==""){try{await window.shutUp()}catch(g){console.warn("error shutting up avatar",g)}userInput.value=c,e.is_final&&(r+=c+" ",userInput.value=r,m||(handleSpeak(r!=""?r:userInput.value),r="",await new Promise(g=>setTimeout(g,100)),userInput.value=""))}}),t.on("error",e=>{console.error(e),t.removeAllListeners(),setTimeout(()=>{console.log("%c socket error, reset","background: green; color: yellow"),d()},30)}),t.on("warning",e=>console.warn(e)),t.on("Metadata",e=>console.log(e)),t.on("close",e=>{console.log("%c socket close, reset","background: green; color: yellow"),console.log(e),t.removeAllListeners(),setTimeout(()=>{a||d()},30)}),await w(t)}catch(n){console.error("error in inittts",n)}finally{a=!1}}window.addEventListener("load",async()=>{console.log("Initializing TTS"),await d()});
